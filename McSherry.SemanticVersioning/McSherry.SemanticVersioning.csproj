<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <!-- Basic Metadata -->
        <Title>Semantic Versioning for .NET</Title>
        <AssemblyName>McSherry.SemanticVersioning</AssemblyName>
        <RootNamespace>McSherry.SemanticVersioning</RootNamespace>
        <Version>1.3.0</Version>
        <PackageId>McSherry.SemanticVersioning</PackageId>
        <Authors>Liam McSherry</Authors>
        <Copyright>2015-19 © Liam McSherry</Copyright>
        <PackageProjectUrl>https://github.com/McSherry/McSherry.SemanticVersioning</PackageProjectUrl>
        <PackageLicenseUrl>https://github.com/McSherry/McSherry.SemanticVersioning/blob/v1.3.0/LICENCE.txt</PackageLicenseUrl>
        <Description>A comprehensive library for working with Semantic Versions (2.0.0), version ranges (node-semver v6.0.0), and Monotonic Versions (1.2).</Description>
        <PackageTags>semantic;sem;version;ver;versioning;semantic versioning;semver;2.0.0;monotonic;mo;mover;monotonic versioning;library;lib</PackageTags>
<PackageReleaseNotes>This minor update adds new features and corrections.
        
### Features
        
 o Advanced version range syntax is now supported
   Support for 'node-semver' caret, tilde, hyphen, and X-range operators in
   VersionRange is added, allowing more complex comparisons to be done simply.
      
 o Semantic versions can now be parsed greedily
   By passing the [ParseMode.Greedy] flag, the [SemanticVersion] parser can now
   be configured to attempt to return a valid version at the first error it
   encounters. This is intended to allow including information after a version
   string that the caller is able to handle.
   
 o Semantic version parser now exposes [IEnumerator(char)] to callers
   This enables a caller to pick up where the parser left off. Used in
   combination with greedy parsing, it makes the job of the caller in
   processing anything stored after a version string easier. It would, for
   example, make converting a [System.Version] of '1.0.0.0' to a semantic
   version easier than it is currently.
   
 o Version range comparisons are no longer transparently memoized
   The [VersionRange] class now exposes an instance [MemoizationAgent] member,
   which enables caching the results of comparisons and which is disabled by
   default. This enables consumers to provide their own caching mechanism
   without potentially causing unexplained high memory usage.
   

### Bug fixes

 o Version range comparisons where one [SemanticVersion] has pre-release
   identifiers and the other doesn't are now performed correctly. Prior to
   this, a comparison would be erroneously performed if the right-hand version
   had identifiers and the left-hand version didn't.
    
</PackageReleaseNotes>
        
        <!-- Build-related information -->
        <TargetFrameworks>
            net45;
            net46;
            netstandard1.0;
            netcoreapp1.0
        </TargetFrameworks>
        <OutputType>Library</OutputType>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <DebugType>portable</DebugType>
    </PropertyGroup>
    
    <!-- .NET 4.5 -->
    <ItemGroup Condition=" '$(TargetFramework)' == 'net45' ">
        
    </ItemGroup>
    
    <!-- .NET 4.6 -->
    <ItemGroup Condition=" '$(TargetFramework)' == 'net46' ">
        
    </ItemGroup>
    
    <!-- .NET Standard 1.0 -->
    <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard1.0' ">
    
    </ItemGroup>
    <PropertyGroup Condition=" '$(TargetFramework)' == 'netstandard1.0' ">
        <!-- 
            The library uses a number of methods/objects not provided
            by .NET Standard, and defining this constant compiles in
            replacements that allow the library to work.
        -->
        <DefineConstants>COMMON_SHIMS</DefineConstants>
    </PropertyGroup>
    
    <!-- .NET Core 1.0 -->
    <ItemGroup Condition=" '$(TargetFramework)' == 'netcoreapp1.0' ">
    
    </ItemGroup>
    <PropertyGroup Condition=" '$(TargetFramework)' == 'netcoreapp1.0'">
        <DefineConstants>COMMON_SHIMS</DefineConstants>
    </PropertyGroup>
</Project>